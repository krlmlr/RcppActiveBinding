// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "RcppActiveBinding_types.h"
#include "../inst/include/RcppActiveBinding.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// create_environment
SEXP create_environment(CharacterVector names, XPtr<GETTER_FUNC> fun, XPtr<void*> payload, Environment parent);
static SEXP RcppActiveBinding_create_environment_try(SEXP namesSEXP, SEXP funSEXP, SEXP payloadSEXP, SEXP parentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< XPtr<GETTER_FUNC> >::type fun(funSEXP);
    Rcpp::traits::input_parameter< XPtr<void*> >::type payload(payloadSEXP);
    Rcpp::traits::input_parameter< Environment >::type parent(parentSEXP);
    rcpp_result_gen = Rcpp::wrap(create_environment(names, fun, payload, parent));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppActiveBinding_create_environment(SEXP namesSEXP, SEXP funSEXP, SEXP payloadSEXP, SEXP parentSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppActiveBinding_create_environment_try(namesSEXP, funSEXP, payloadSEXP, parentSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// callback
SEXP callback(String name, List fun_payload);
static SEXP RcppActiveBinding_callback_try(SEXP nameSEXP, SEXP fun_payloadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< String >::type name(nameSEXP);
    Rcpp::traits::input_parameter< List >::type fun_payload(fun_payloadSEXP);
    rcpp_result_gen = Rcpp::wrap(callback(name, fun_payload));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppActiveBinding_callback(SEXP nameSEXP, SEXP fun_payloadSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppActiveBinding_callback_try(nameSEXP, fun_payloadSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int RcppActiveBinding_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("SEXP(*create_environment)(CharacterVector,XPtr<GETTER_FUNC>,XPtr<void*>,Environment)");
        signatures.insert("SEXP(*callback)(String,List)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP RcppActiveBinding_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RcppActiveBinding", "RcppActiveBinding_create_environment", (DL_FUNC)RcppActiveBinding_create_environment_try);
    R_RegisterCCallable("RcppActiveBinding", "RcppActiveBinding_callback", (DL_FUNC)RcppActiveBinding_callback_try);
    R_RegisterCCallable("RcppActiveBinding", "RcppActiveBinding_RcppExport_validate", (DL_FUNC)RcppActiveBinding_RcppExport_validate);
    return R_NilValue;
}
