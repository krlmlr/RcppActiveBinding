// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_bindrcpp_RCPPEXPORTS_H_GEN_
#define RCPP_bindrcpp_RCPPEXPORTS_H_GEN_

#include "bindrcpp_types.h"
#include <Rcpp.h>

namespace bindrcpp {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("bindrcpp", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("bindrcpp", "bindrcpp_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in bindrcpp");
            }
        }
    }

    inline Environment create_env(CharacterVector names, bindrcpp::GETTER_FUNC fun, bindrcpp::PAYLOAD payload, Environment enclos) {
        typedef SEXP(*Ptr_create_env)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_create_env p_create_env = NULL;
        if (p_create_env == NULL) {
            validateSignature("Environment(*create_env)(CharacterVector,bindrcpp::GETTER_FUNC,bindrcpp::PAYLOAD,Environment)");
            p_create_env = (Ptr_create_env)R_GetCCallable("bindrcpp", "bindrcpp_create_env");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_create_env(Rcpp::wrap(names), Rcpp::wrap(fun), Rcpp::wrap(payload), Rcpp::wrap(enclos));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Environment >(rcpp_result_gen);
    }

    inline Environment populate_env(Environment env, CharacterVector names, bindrcpp::GETTER_FUNC fun, bindrcpp::PAYLOAD payload) {
        typedef SEXP(*Ptr_populate_env)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_populate_env p_populate_env = NULL;
        if (p_populate_env == NULL) {
            validateSignature("Environment(*populate_env)(Environment,CharacterVector,bindrcpp::GETTER_FUNC,bindrcpp::PAYLOAD)");
            p_populate_env = (Ptr_populate_env)R_GetCCallable("bindrcpp", "bindrcpp_populate_env");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_populate_env(Rcpp::wrap(env), Rcpp::wrap(names), Rcpp::wrap(fun), Rcpp::wrap(payload));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Environment >(rcpp_result_gen);
    }

}

#endif // RCPP_bindrcpp_RCPPEXPORTS_H_GEN_
